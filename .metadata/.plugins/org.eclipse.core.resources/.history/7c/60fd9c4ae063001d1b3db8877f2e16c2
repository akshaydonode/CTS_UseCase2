package com.cts.dataloader.services;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.cts.dataloader.entitities.PatientDetailsEntity;
import com.cts.dataloader.exception.DataLoaderException;
import com.cts.dataloader.repositories.PatientRepository;

@Service
public class PatientServiceImpl implements PatientService {

	@Autowired
	PatientRepository patientRepository;

	@Override
	public String patientData(MultipartFile excelFile) {

		List<PatientDetailsEntity> patientDetailsEntities;

		try {

			Path tempDir = Files.createTempDirectory("");

			File tempFile = tempDir.resolve(excelFile.getOriginalFilename()).toFile();

			excelFile.transferTo(tempFile);

			Workbook workbook = WorkbookFactory.create(tempFile);

			Sheet sheet = workbook.getSheetAt(0);

			Stream<Row> rowStream = StreamSupport.stream(sheet.spliterator(), false);

			rowStream.forEach(row -> {

				// for skipping first row
				if (row.getRowNum() == 0) {
					return;
				}
				Stream<Cell> cellStream = StreamSupport.stream(row.spliterator(), false);
				PatientDetailsEntity patientDetailsEntity = new PatientDetailsEntity();
				try {
					List<Object> cellVals = cellStream.map(cell -> {

						// getting column number
						int cellVal = cell.getColumnIndex();
						Object cellVal1 = null;

						if (cellVal == 0) {

							cellVal1 = cell.getStringCellValue();
							
							patientDetailsEntity.setPatientName(cell.getStringCellValue());
							// System.out.println(cellVal1);

							// return cellVal1;
						} else if (cellVal == 1) {
							cellVal1 = cell.getStringCellValue();
							patientDetailsEntity.setAddress(cell.getStringCellValue());
							// System.out.println(cellVal1);

							// return cellVal1;
						} else if (cellVal == 2) {
							cellVal1 = cell.getStringCellValue();
							try {
								patientDetailsEntity.setDob(new SimpleDateFormat("dd/MM/yyyy").parse(cell.getStringCellValue()));
							} catch (ParseException e) {
								System.out.println("getting an issue in date parse");
							}
							// System.out.println(cellVal1);

							// return cellVal1;
						} else if (cellVal == 3) {
							cellVal1 = cell.getStringCellValue();
							// System.out.println(cellVal1);
							// return cellVal1;
						} else if (cellVal == 4) {
							cellVal1 = cell.getNumericCellValue();
							// System.out.println(cellVal1);
							// return cellVal1;
						} else if (cellVal == 5) {
							cellVal1 = cell.getStringCellValue();
							// System.out.println(cellVal1);
							// return cellVal1;
						} else if (cellVal == 6) {
							cellVal1 = cell.getStringCellValue();
							// System.out.println(cellVal1);
							// return cellVal1;
						}

						System.out.println(cellVal);
						return cellVal1;

//					String cellVal = cell.getStringCellValue();
						// return cellVal;
					}).collect(Collectors.toList());

					System.out.println(cellVals);
				} catch (Exception e) {

				}

			});

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return null;

	}

	@Override
	public List<PatientDetailsEntity> getPatientDetails(String patientName) throws DataLoaderException {
		List<PatientDetailsEntity> patientDetailsEntities = null;
		if (patientName.isEmpty()) {
			throw new DataLoaderException("PatientName should not be empty.");
		}

		List<PatientDetailsEntity> patientDetailOptional = patientRepository
				.getPatientDetailsByName(patientName.toUpperCase());
		if (patientDetailOptional.isEmpty()) {
			throw new DataLoaderException(patientName + " Not exist(present) in database.");
		} else {
			for (PatientDetailsEntity patientDetailsEntity : patientDetailOptional) {
				patientDetailsEntities.add(patientDetailsEntity);
			}

			return patientDetailsEntities;
		}

	}

	@Override
	public PatientDetailsEntity updatePatientDetails(int patientId, PatientDetailsEntity patientDetailsEntity)
			throws DataLoaderException {
		Optional<PatientDetailsEntity> optionalPatientDetails = patientRepository.getPatientDetailsById(patientId);

		if (optionalPatientDetails.isEmpty()) {
			throw new DataLoaderException("Patient Not exist");
		} else {
			optionalPatientDetails.get().setAddress(patientDetailsEntity.getAddress());
			optionalPatientDetails.get().setDob(patientDetailsEntity.getDob());
			optionalPatientDetails.get().setEmailId(patientDetailsEntity.getEmailId());
			optionalPatientDetails.get().setPatientName(patientDetailsEntity.getPatientName());
			optionalPatientDetails.get().setPhoneNumber(patientDetailsEntity.getPhoneNumber());
			optionalPatientDetails.get().setStatus(patientDetailsEntity.getStatus());

			return patientRepository.save(optionalPatientDetails.get());
		}

	}

	@Override
	public List<PatientDetailsEntity> getAllPatientData() throws DataLoaderException {
		List<PatientDetailsEntity> patientDetailsEntities = patientRepository.findAll();
		if (patientDetailsEntities.isEmpty()) {
			throw new DataLoaderException("Patient Not exist.please upload patient details");
		} else {
			return patientDetailsEntities;
		}
	}

}
