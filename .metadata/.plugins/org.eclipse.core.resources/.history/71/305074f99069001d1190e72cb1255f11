package com.cts.dataloader.controllers;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.cts.dataloader.dtos.ResponseDTO;
import com.cts.dataloader.dtos.UserDTO;
import com.cts.dataloader.dtos.UserLoginDTO;
import com.cts.dataloader.entitities.UserEntity;
import com.cts.dataloader.exception.DataLoaderException;
import com.cts.dataloader.services.UserService;

@RestController
@RequestMapping("/user")
public class UserController {

	@Autowired
	UserService userService;
	
	@Autowired
	ResponseDTO responseDTO;

	//@PostMapping("/signup")
	@RequestMapping(method = RequestMethod.POST,value = "/signup")
	public ResponseDTO registerUser(@RequestBody UserDTO userDTO) {
		System.out.println("inside signup controller "+userDTO.toString());

		//ResponseDTO responseDto = new ResponseDTO();

		try {
			UserEntity userEntity2 = userService.registerUserService(userDTO);
			responseDTO.setResult(userEntity2);
			responseDTO.setMessage("User Registered Successfully...");
		} catch (DataLoaderException e) {
			responseDTO.setException(e.getMessage());
		}

		return responseDTO;

	}

	@PostMapping("/login")//deserialization
	public ResponseDTO loginAuthor(@Valid @RequestBody UserLoginDTO userDTO) {
		System.out.println("inside login controller "+userDTO.toString());
		//ResponseDTO responseDto = new ResponseDTO();

		try {
			UserEntity userEntity2 = userService.userLogin(userDTO);
			responseDTO.setResult(userEntity2);
			responseDTO.setMessage("User Login successfully");
		} catch (DataLoaderException e) {
			responseDTO.setException(e.getMessage());
		}

		return responseDTO;//serialization
	}
	
	@GetMapping("/checkUsername/{username}")
	public ResponseDTO checkUsername(@PathVariable String username) {
		//ResponseDTO responseDto = new ResponseDTO();
		try {
			UserEntity userEntity2 = userService.checkUsername(username);
			responseDTO.setResult(userEntity2);
			responseDTO.setMessage("User found successfully");
		} catch (DataLoaderException e) {
			responseDTO.setException(e.getMessage());
		}
		return responseDTO;
	}
	
	@PutMapping("/updatePassword")
	public ResponseDTO updatePassword(@RequestBody UserLoginDTO userLoginDTO) {
		try {
			UserEntity userEntity = userService.updatePassword(userLoginDTO);
			responseDTO.setResult(userEntity);
			responseDTO.setMessage("Password updated successfully");
		} catch (DataLoaderException e) {
			responseDTO.setException(e.getMessage());
		}
		return responseDTO;
	}
}
